// app/src/main/java/com/rego/screens/main/profile/ProfileScreen.ktpackage com.rego.screens.main.profileimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.*import androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport com.rego.Rimport com.rego.screens.base.DefaultScreenUIimport com.rego.screens.base.ProgressBarStateimport com.rego.screens.components.LabelValuePairimport com.rego.screens.main.home.BottomNavBarimport com.rego.ui.theme.*import org.koin.androidx.compose.koinViewModel@Composablefun ProfileScreen(    onChangePasswordClick: () -> Unit = {},    onBackClick: () -> Unit = {},    onHomeClick: () -> Unit = {}) {    val viewModel: ProfileViewModel = koinViewModel()    val state by viewModel.state.collectAsState()    var passwordMasked by remember { mutableStateOf(true) }    // Load user profile when screen opens    LaunchedEffect(Unit) {        viewModel.setEvent(ProfileEvent.Init)    }    Box(        modifier = Modifier.fillMaxWidth()    ) {        DefaultScreenUI(            progressBarState = state.progressBarState,            errors = viewModel.errors        ) { paddingValues ->            // HEADER            Box(                modifier = Modifier                    .fillMaxWidth()                    .height(200.dp)                    .background(                        Color00954D,                        shape = RoundedCornerShape(bottomEnd = 12.dp, bottomStart = 12.dp)                    )                    .padding(top = 0.dp, bottom = 48.dp)            ) {                // AppBar - back arrow and title                Row(                    modifier = Modifier                        .fillMaxWidth()                        .padding(                            top = 32.dp + paddingValues.calculateTopPadding(),                            start = 14.dp,                            end = 14.dp                        ),                    verticalAlignment = Alignment.CenterVertically,                ) {                    Icon(                        painter = painterResource(id = R.drawable.back),                        contentDescription = "Back",                        tint = Color.White,                        modifier = Modifier                            .size(22.dp)                            .clickable { onBackClick() }                    )                    Text(                        text = "  My Account",                        style = fontMediumPoppins().copy(fontSize = 17.sp),                        color = Color.White,                    )                }                // Avatar (centered at the bottom of green area)                Box(                    modifier = Modifier                        .align(Alignment.BottomCenter)                        .offset(y = 70.dp)                ) {                    Box(                        modifier = Modifier                            .size(56.dp)                            .clip(CircleShape)                            .background(Color.White)                            .border(width = 2.dp, color = Color00954D, shape = CircleShape),                        contentAlignment = Alignment.Center                    ) {                        Text(                            text = state.name?.firstOrNull()?.toString()?.uppercase() ?: "U",                            style = fontSemiBoldPoppins().copy(fontSize = 23.sp),                            color = Color00954D,                            textAlign = TextAlign.Center                        )                    }                }            }            Spacer(modifier = Modifier.height(38.dp))            // Show loading or content            if (state.progressBarState == ProgressBarState.Loading) {                Box(                    modifier = Modifier.fillMaxSize(),                    contentAlignment = Alignment.Center                ) {                    CircularProgressIndicator(color = Color00954D)                }            } else {                // Name                Text(                    text = state.name ?: "Loading...",                    color = Color(0xFF222222),                    style = fontSemiBoldMontserrat().copy(fontSize = 16.sp),                    textAlign = TextAlign.Center,                    modifier = Modifier.fillMaxWidth()                )                Spacer(modifier = Modifier.height(18.dp))                // Info Card                Card(                    modifier = Modifier                        .padding(horizontal = 16.dp)                        .fillMaxWidth(),                    elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),                    shape = RoundedCornerShape(14.dp),                    colors = CardDefaults.cardColors(containerColor = Color.White)                ) {                    Column(modifier = Modifier.fillMaxWidth()) {                        Spacer(modifier = Modifier.height(4.dp))                        // Phone Number                        LabelValuePair(                            label = "Phone Number",                            value = state.phone ?: "Not provided",                        )                        Divider(color = Color1A1A1A_16(), thickness = 1.dp)                        // Email                        LabelValuePair(                            label = "Email Id",                            value = state.email ?: "Not provided",                        )                        Divider(color = Color1A1A1A_16(), thickness = 1.dp)                        // Password                        LabelValuePair(                            label = "Password",                            value = if (passwordMasked) "*********" else "mySecretPWD",                            trailing = {                                Row(                                    verticalAlignment = Alignment.CenterVertically,                                    modifier = Modifier                                ) {                                    Icon(                                        painter = painterResource(id = R.drawable.password_view),                                        contentDescription = "Toggle password",                                        tint = Color00954D,                                        modifier = Modifier                                            .size(22.dp)                                            .clickable {                                                passwordMasked = !passwordMasked                                            }                                    )                                    Spacer(modifier = Modifier.weight(1f))                                    Text(                                        text = "Change Password",                                        color = Color00954D,                                        style = fontMediumPoppins().copy(fontSize = 10.sp),                                        modifier = Modifier.clickable { onChangePasswordClick() }                                    )                                }                            }                        )                        if (!state.insuranceCompany.isNullOrBlank() && !state.insuranceCompany.equals("external")) {                            Divider(color = Color1A1A1A_16(), thickness = 1.dp)                            LabelValuePair(                                label = "Insurance Company",                                value = state.insuranceCompany ?: "",                            )                        }                        if (!state.city.isNullOrBlank() || !state.state.isNullOrBlank()) {                            Divider(color = Color1A1A1A_16(), thickness = 1.dp)                            LabelValuePair(                                label = "Location",                                value = buildString {                                    state.city?.let { append(it) }                                    if (!state.city.isNullOrBlank() && !state.state.isNullOrBlank()) {                                        append(", ")                                    }                                    state.state?.let { append(it) }                                },                            )                        }                    }                }                Spacer(modifier = Modifier.height(32.dp))                // Logout Button (optional)                Card(                    modifier = Modifier                        .padding(horizontal = 16.dp)                        .fillMaxWidth()                        .clickable {                            // Handle logout                            viewModel.setEvent(ProfileEvent.Logout)                        },                    elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),                    shape = RoundedCornerShape(8.dp),                    colors = CardDefaults.cardColors(containerColor = Color.White),                    border = CardDefaults.outlinedCardBorder()                ) {                    Row(                        modifier = Modifier                            .fillMaxWidth()                            .padding(16.dp),                        horizontalArrangement = Arrangement.Center,                        verticalAlignment = Alignment.CenterVertically                    ) {                        Icon(                            painter = painterResource(id = R.drawable.error), // Use logout icon if available                            contentDescription = "Logout",                            tint = ColorE7503D,                            modifier = Modifier.size(20.dp)                        )                        Spacer(modifier = Modifier.width(8.dp))                        Text(                            text = "Logout",                            style = fontSemiBoldPoppins().copy(fontSize = 14.sp),                            color = ColorE7503D                        )                    }                }            }        }        // Bottom Navigation        BottomNavBar(            modifier = Modifier                .align(Alignment.BottomEnd)                .fillMaxWidth(),            onHomeClick = onHomeClick,            isProfileSelected = true,            onProfileClick = {                // Already on profile screen            }        )    }}@Preview@Composablefun ProfileScreenPreview() {    RegoTheme {        ProfileScreen()    }}